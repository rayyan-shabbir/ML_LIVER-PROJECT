code:
from pymongo import MongoClient
import pandas as pd

class MongoDBDataProcessor:
    def __init__(self, uri, database_name):
        self.client = MongoClient(uri)
        self.db = self.client[database_name]
        self.collection = None

    def access_collection(self, collection_name):
        """Set the collection to operate on"""
        self.collection = self.db[collection_name]

    def base_pipeline(self):
        """Base pipeline common to all datasets"""
        return [
            {
                '$match': {
                    'lab_results.api_test_name': 'Alanine aminotransferase (ALT) measurement'
                }
            },
            {
                '$set': {
                    'lab_results': {
                        '$map': {
                            'input': '$lab_results',
                            'as': 'lab',
                            'in': {
                                '$cond': {
                                    'if': {
                                        '$eq': [
                                            '$$lab.api_test_name', 'Alanine aminotransferase (ALT) measurement'
                                        ]
                                    },
                                    'then': {
                                        '$mergeObjects': [
                                            '$$lab', {
                                                'api_test_name': 'alanine_aminotransferase'
                                            }
                                        ]
                                    },
                                    'else': '$$lab'
                                }
                            }
                        }
                    }
                }
            },
            {
                '$project': {
                    'PatientID': 1,
                    'demographics': 1,
                    'vitals': 1,
                    'medications': 1,
                    'diagnosis': 1,
                    'Active_Meds': 1,
                    'lab_results': {
                        '$filter': {
                            'input': '$lab_results',
                            'as': 'lab',
                            'cond': {
                                '$eq': [
                                    '$$lab.api_test_name', 'alanine_aminotransferase'
                                ]
                            }
                        }
                    }
                }
            },
            {
                '$project': {
                    'PatientID': 1,
                    'demographics': 1,
                    'vitals': 1,
                    'medications': 1,
                    'diagnosis': 1,
                    'Active_Meds': 1,
                    'lab_results': {
                        '$sortArray': {
                            'input': '$lab_results',
                            'sortBy': {
                                'date': -1
                            }
                        }
                    }
                }
            },
            {
                '$addFields': {
                    'valid_labs': {
                        '$reduce': {
                            'input': '$lab_results',
                            'initialValue': {
                                'valid_labs': [],
                                'last_lab': None
                            },
                            'in': {
                                '$cond': {
                                    'if': {
                                        '$and': [
                                            {
                                                '$ne': [
                                                    '$$value.last_lab', None
                                                ]
                                            }, {
                                                '$gte': [
                                                    {
                                                        '$dateDiff': {
                                                            'startDate': '$$this.date',
                                                            'endDate': '$$value.last_lab.date',
                                                            'unit': 'day'
                                                        }
                                                    }, 80
                                                ]
                                            }, {
                                                '$lt': [
                                                    {
                                                        '$dateDiff': {
                                                            'startDate': '$$this.date',
                                                            'endDate': '$$value.last_lab.date',
                                                            'unit': 'day'
                                                        }
                                                    }, 101
                                                ]
                                            }
                                        ]
                                    },
                                    'then': {
                                        'valid_labs': {
                                            '$concatArrays': [
                                                [
                                                    '$$value.last_lab'
                                                ], [
                                                    '$$this'
                                                ]
                                            ]
                                        },
                                        'last_lab': '$$this'
                                    },
                                    'else': {
                                        'valid_labs': '$$value.valid_labs',
                                        'last_lab': '$$this'
                                    }
                                }
                            }
                        }
                    }
                }
            },
            {
                '$project': {
                    'PatientID': 1,
                    'demographics': 1,
                    'vitals': 1,
                    'medications': 1,
                    'diagnosis': 1,
                    'Active_Meds': 1,
                    'valid_labs': '$valid_labs.valid_labs'
                }
            },
            {
                '$match': {
                    'valid_labs': {
                        '$size': 2
                    }
                }
            },
            {
                '$project': {
                    'PatientID': 1,
                    'lab_after': {
                        '$arrayElemAt': [
                            '$valid_labs', 0
                        ]
                    },
                    'lab_before': {
                        '$arrayElemAt': [
                            '$valid_labs', 1
                        ]
                    }
                }
            },
            {
                '$project': {
                    'PatientID': 1,
                    'lab_after': {
                        'date': '$lab_after.date',
                        'result': '$lab_after.result',
                        'unit': '$lab_after.unit',
                        'range': '$lab_after.range',
                        'api_test_name': '$lab_after.api_test_name'
                    },
                    'lab_before': {
                        'date': '$lab_before.date',
                        'result': '$lab_before.result',
                        'unit': '$lab_before.unit',
                        'range': '$lab_before.range',
                        'api_test_name': '$lab_before.api_test_name'
                    }
                }
            }
        ]

    def run_pipeline(self, pipeline):
        """Run an aggregation pipeline on the collection"""
        if self.collection is None:
            raise Exception("Collection not set. Use access_collection to set the collection.")
        results = self.collection.aggregate(pipeline)
        data = list(results)
        df = pd.DataFrame(data)
        return df

    def display_dataframe(self, df):
        """Display DataFrame or print message if empty"""
        if not df.empty:
            print(df.head())
        else:
            print("No data to display")

    # Function for Labs_Result_Dataset
    def process_labs_result(self):
        pipeline = self.base_pipeline()  # Use the base pipeline
        # Add more stages specific to this dataset as needed
        df = self.run_pipeline(pipeline)
        self.display_dataframe(df)
        return df

    # Function for Demographics_Dataset
    def process_demographics(self):
        pipeline = self.base_pipeline()  # Start with the base pipeline
        pipeline.append({
            '$project': {
                'PatientID': 1,
                'demographics': 1
            }
        })
        df = self.run_pipeline(pipeline)
        self.display_dataframe(df)
        return df

    # Function for Diagnosis_Dataset
    def process_diagnosis(self):
        pipeline = self.base_pipeline()  # Start with the base pipeline
        pipeline.append({
            '$project': {
                'PatientID': 1,
                'diagnosis': 1
            }
        })
        df = self.run_pipeline(pipeline)
        self.display_dataframe(df)
        return df

    # Function for Vitals_Dataset
    def process_vitals(self):
        pipeline = self.base_pipeline()  # Start with the base pipeline
        pipeline.append({
            '$project': {
                'PatientID': 1,
                'vitals.weight': 1,
                'vitals.height': 1,
                'vitals.bmi': 1,
                'vitals.bsa': 1,
                'vitals.mean_arterial_pressure': 1
            }
        })
        df = self.run_pipeline(pipeline)
        self.display_dataframe(df)
        return df

    # Function for Medications_Dataset
    def process_medications(self):
        pipeline = self.base_pipeline()  # Start with the base pipeline
        pipeline.append({
            '$project': {
                'PatientID': 1,
                'medications': 1
            }
        })
        df = self.run_pipeline(pipeline)
        self.display_dataframe(df)
        return df

# Usage example
if __name__ == "__main__":
    uri = "mongodb://bootcamp24:Bootcamp%232024@172.16.101.226:27017/"
    database_name = "Bootcamp_2024"
    collection_name = "Liver"

    # Instantiate the class and access collection
    processor = MongoDBDataProcessor(uri, database_name)
    processor.access_collection(collection_name)

    # Process each dataset
    labs_df = processor.process_labs_result()
    demographics_df = processor.process_demographics()
    diagnosis_df = processor.process_diagnosis()
    vitals_df = processor.process_vitals()
    medications_df = processor.process_medications()



updated base_pipeline:
[
    {
        '$limit': 400000
    }, {
        '$match': {
            'lab_results.api_test_name': 'Alanine aminotransferase (ALT) measurement'
        }
    }, {
        '$set': {
            'lab_results': {
                '$map': {
                    'input': '$lab_results', 
                    'as': 'lab', 
                    'in': {
                        '$cond': {
                            'if': {
                                '$eq': [
                                    '$$lab.api_test_name', 'Alanine aminotransferase (ALT) measurement'
                                ]
                            }, 
                            'then': {
                                '$mergeObjects': [
                                    '$$lab', {
                                        'api_test_name': 'alanine_aminotransferase'
                                    }
                                ]
                            }, 
                            'else': '$$lab'
                        }
                    }
                }
            }
        }
    }, {
        '$project': {
            'PatientID': 1, 
            'Practice': 1, 
            'demographics': 1, 
            'vitals': 1, 
            'medications': 1, 
            'diagnosis': 1, 
            'Active_Meds': 1, 
            'lab_results': {
                '$filter': {
                    'input': '$lab_results', 
                    'as': 'lab', 
                    'cond': {
                        '$eq': [
                            '$$lab.api_test_name', 'alanine_aminotransferase'
                        ]
                    }
                }
            }
        }
    }, {
        '$project': {
            'PatientID': 1, 
            'Practice': 1, 
            'demographics': 1, 
            'vitals': 1, 
            'medications': 1, 
            'diagnosis': 1, 
            'Active_Meds': 1, 
            'lab_results': {
                '$sortArray': {
                    'input': '$lab_results', 
                    'sortBy': {
                        'date': -1
                    }
                }
            }
        }
    }, {
        '$addFields': {
            'valid_labs': {
                '$reduce': {
                    'input': '$lab_results', 
                    'initialValue': {
                        'valid_labs': [], 
                        'last_lab': None
                    }, 
                    'in': {
                        '$cond': {
                            'if': {
                                '$and': [
                                    {
                                        '$ne': [
                                            '$$value.last_lab', None
                                        ]
                                    }, {
                                        '$gte': [
                                            {
                                                '$dateDiff': {
                                                    'startDate': '$$this.date', 
                                                    'endDate': '$$value.last_lab.date', 
                                                    'unit': 'day'
                                                }
                                            }, 80
                                        ]
                                    }, {
                                        '$lt': [
                                            {
                                                '$dateDiff': {
                                                    'startDate': '$$this.date', 
                                                    'endDate': '$$value.last_lab.date', 
                                                    'unit': 'day'
                                                }
                                            }, 101
                                        ]
                                    }
                                ]
                            }, 
                            'then': {
                                'valid_labs': {
                                    '$concatArrays': [
                                        [
                                            '$$value.last_lab'
                                        ], [
                                            '$$this'
                                        ]
                                    ]
                                }, 
                                'last_lab': '$$this'
                            }, 
                            'else': {
                                'valid_labs': '$$value.valid_labs', 
                                'last_lab': '$$this'
                            }
                        }
                    }
                }
            }
        }
    }, {
        '$project': {
            'PatientID': 1, 
            'Practice': 1, 
            'demographics': 1, 
            'vitals': 1, 
            'medications': 1, 
            'diagnosis': 1, 
            'Active_Meds': 1, 
            'valid_labs': '$valid_labs.valid_labs'
        }
    }, {
        '$match': {
            'valid_labs': {
                '$size': 2
            }
        }
    }, {
        '$project': {
            'PatientID': 1, 
            'Practice': 1, 
            'lab_after': {
                '$arrayElemAt': [
                    '$valid_labs', 0
                ]
            }, 
            'lab_before': {
                '$arrayElemAt': [
                    '$valid_labs', 1
                ]
            }
        }
    }, {
        '$project': {
            'PatientID': 1, 
            'Practice': 1, 
            'lab_after': {
                'date': '$lab_after.date', 
                'result': '$lab_after.result', 
                'unit': '$lab_after.unit', 
                'range': '$lab_after.range', 
                'api_test_name': '$lab_after.api_test_name'
            }, 
            'lab_before': {
                'date': '$lab_before.date', 
                'result': '$lab_before.result', 
                'unit': '$lab_before.unit', 
                'range': '$lab_before.range', 
                'api_test_name': '$lab_before.api_test_name'
            }
        }
    }
]


I want you to change the above code with followig changes:
1. Make MongoDBDataProcessor as abstarct base class and make 5 other classes like : ALT_Processor, AST_Processor, GGT_Processor, Albumin_Processor, Bilirubin_Processor which extends from base abstract.
2. The constructor of MongoDBDataProcessor should not exists instead make it as a separate function.
3. All the functions like :: process_labs_result, process_demographics, process_diagnosis, process_vitals, process_medications, are generic and also should exists with their own implementation in child classes.
4. Also the base_piple function in abstract class should be updated with the "updated base_pipeline" I provided to you.
5. Also there should be something updatio I also want in "update_base_pipeline" and that is the mapping:
Like I want that the function should take a arguemnt each time and return the updated dynamic pipeline whenever child requires it.

mappings to update at calling time the function::

for alt : 
{ 
'alanine_aminotransferase' : [
              'Alanine aminotransferase (ALT) measurement'
]}

for ast:
{ 
'asparate_aminotransferase': [
              'Serum or plasma aspartate aminotransferase measurement (enzymatic activity/volume)', 'Aspartate aminotransferase (AST) measurement'
]}


for ggt:
{ 
'GGT': [
             'Gamma glutamyl transferase (GGT) measurement'
]}


for albumin:
{ 
'albumin': [
            'Serum or plasma albumin measurement (mass/volume)', 'Serum albumin measurement', 'Urine albumin measurement', 'Albumin measurement for detection of microalbuminuria', 'Urine albumin measurement for detection of microalbuminuria', 'Urine albumin measurement'
]}


for bilirubin:
{ 
'bilirubin': [
           'Direct bilirubin measurement', 'Bilirubin measurement', 'Unconjugated bilirubin measurement'
]}


So these mappings should be used to updated dynamic base_pipline which will then be used for concatenation,
like for alt in first query it filters on basis on values inside list, and the update all values with key, same for others.
